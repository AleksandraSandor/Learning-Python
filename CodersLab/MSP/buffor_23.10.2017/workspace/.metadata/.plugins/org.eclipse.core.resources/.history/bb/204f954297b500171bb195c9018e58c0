# zaposywanie nowej artosci do bazy danych
class User:
    #prywatna smienna klasowa: tutaj nazwa tabeli s któa sie laczymy
    _TABLE_NAME = "user_data"
    
#     def __init__(self):
#         self._id = -1
#         self._email = None
#         self._username = None
#         self._hashed_password = None
#         
    def __init__(self, email, username, password):
        self._id = -1
        self._email = email
        self._username = username
        self._hashed_password = password
        
    def __init__(self):

    
    @property    
    def email(self):
        return self._email
    @email.setter # ten setter owinine zawalidowac dae domyslnie, a jezeli nie sa poprawne, wyrzucic wyjatkiem
    # tylko ze tutaj jest napisany w niekompletnej formie
    def email(self, email):
        #try: - tutaj testuje funkcje i rzucam wyjatkiem
        self._email = email
     
     @username.setter
     def username(self, username):
         return self._hashed_password
     
     @hashed_password.setter
        def hashed_password = (self, hashed_password):
        #TODO: implement hashng password
        self._hashed_password = "*HASHED*" + hashed_password
        
    def save(self, cursor): #jakbysmy dali i connecion i cursor, to bymy uzaleznili to od sql connector, a klasa ma tlyko obsługiwac usera, dlateo to co jest potrzebn do wykonania zadan przesylamy z gory jako parametry i nie przechowujemy w klasie
        if self._id == -1:
            sql = "INSERT INTO {} VALUES(default, %s, %s, %s"
            cursor.execute(sql, (self.email, self.username, self.hashed_password))
            
            
            
new_user = User("rafal@mail.com", 'rafal', 'rafal')
new_user.save()